<?xml version="1.0" encoding="utf-8"?>
<!--
	============================================================================
	Project Name:		MoreMath.csproj

	Project Abstract:	Segregate the math routines so that they alone can be
	                    subjected to arithmetic overflow checking.

	Remarks:			As it applies to Roslyn compiler, the Deterministic
						switch implements determinism in a very narrow context,
						which affects only the versioning of the generated PE
						file in which the assembly is stored.

						This switch is relatively new, and its inclusion in the
						default generated project skeleton appears to be quite
						recent.

						For further details, please see the first article cited
						in the References section that follows.

	References:			1)	Deterministic builds in Roslyn
							http://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html

						2)	/deterministic switch for msbuild does not work
							https://stackoverflow.com/questions/39657709/deterministic-switch-for-msbuild-does-not-work

	============================================================================
	Revision History
	============================================================================

	Date       By  Description
	========== === =============================================================
	2018/12/23 DAG Disable deterministic versioning.
	2019/07/18 DAG Add automatic NuGet package publication.
	============================================================================
-->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{A9512FCD-3F59-4CE9-8923-367AED4511A8}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>WizardWrx</RootNamespace>
    <AssemblyName>WizardWrx.MoreMath</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <!--    <Deterministic>true</Deterministic>	-->
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <!-- 2019/07/18 01:49:47 - DAG - Added for NuGet package builder -->
    <PackageDir>$(ProjectDir)Package</PackageDir>
    <SolutionPackageDir>$(ProjectDir)..\packages</SolutionPackageDir>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb$;(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\WizardWrx.MoreMath.xml</DocumentationFile>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <LangVersion>default</LangVersion>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Release\WizardWrx.MoreMath.xml</DocumentationFile>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <Prefer32Bit>false</Prefer32Bit>
    <LangVersion>default</LangVersion>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\ProductAssemblyInfo.cs">
      <Link>Properties\ProductAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="MoreMath.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- 2019/07/18 01:01:04 - DAG Everything from this point to the end is new, and was added to support NuGet package generation. -->
  <Target Name="AfterBuild">
    <!-- Load up the information from the assembly -->
    <GetAssemblyIdentity AssemblyFiles="$(OutputPath)$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="OutputAssemblyInfo" />
    </GetAssemblyIdentity>
    <Message Text="Info: Assembly $(AssemblyName).dll version =  %(OutputAssemblyInfo.Version)" />
  </Target>
  <Target Name="Package" AfterTargets="AfterBuild" Condition=" '$(Configuration)' == 'Release'">
    <!-- Ensure the Package directory exists for this project -->
    <MakeDir Directories="$(PackageDir)" />
    <!-- Package the project -->
    <Exec WorkingDirectory="$(BuildDir)" Command="NuGet.exe pack $(ProjectName).csproj -Properties Configuration=$(Configuration) -OutputDir $(PackageDir) -IncludeReferencedProjects -Verbosity detailed" />
  </Target>
  <!-- Publish the project. -->
  <Target Name="Publish" AfterTargets="Package" Condition=" '$(Configuration)' == 'Release'">
    <Exec WorkingDirectory="$(PackageDir)" Command="NuGet.exe push $(AssemblyName).%(OutputAssemblyInfo.Version).nupkg" />
  </Target>
  <Target Name="BeforeBuild" Condition=" '$(Configuration)' == 'Debug'">
    <Exec WorkingDirectory="$(ProjectDir)" Command="nuget install packages.config -OutputDirectory $(SolutionPackageDir)" />
  </Target>
</Project>