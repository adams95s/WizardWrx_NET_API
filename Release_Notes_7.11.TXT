                               Release Notes for
                        WizardWrx..NET APIl, version 7.11

Owing to the way this file was produced, it is intentionally plan text, rather than
Markdown. It was constructed by pasting the absolute file names from my local repository
into a plain text file, then inserting the revision history item(s) under the name of
the file from which they came. A few files have multiple notes, each with its own date,
to reflect changes that were implemented over the time since I released version 7.10, a
little over a month ago.

The exception is Common/Properties/Resources.Designer.cs, which has no revision history,
since the file is auto-generated by the Visual Studio 2017 resource editor. Therefore,
this is the only place where the changes are documented.

----------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Common\MagicNumbers.cs:
----------------------------------------------------------------------------------------

    2018/11/10 7.11    DAG    BREAKING CHANGE: Rename EXACTLY_ONE_NUNDRED to
                                               EXACTLY_ONE_HUNDRED, correcting a
                                               misspelling that prevented me
                                               finding it yesterday.

                              Correct the value of EXACTLY_TEN_THOUSAND, which I
                              discovered was returning one million.

                              Define overlooked constants EXACTLY_TEN and
                              EVENLY_DIVISIBLE.

----------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Common\NumericFormats.cs:
----------------------------------------------------------------------------------------

    2018/11/10 7.11    DAG    1) Define IntegerToHexStr overloads that omit the
                                 second and third arguments, substituting common
                                 defaults for the missing arguments.

                              2) Change FormatStatusCode to use the simplified
                                 first overload, shortening its stack frame and
                                 call setup requirments.

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Common\StringTricks.cs:
-------------------------------------------------------------------------------------------------------

	2018/11/17 7.11    DAG    ParseCommentInHTMLComment (deprecated): Wrap the
                              XML comment in the example in a code block, about
                              which I learned a few days ago while researching
                              an issue concerning cross references to other
                              assemblies.

                              Eliminate the unreferenced using directive for the
                              System.Text namespace.

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Common\Properties\Resources.Designer.cs:
-------------------------------------------------------------------------------------------------------

    2018/11/11 7.11    DAG    Two new strings:

                                    ERRMSG_NULLREF_NEVER_VALID      A null reference to a string is never valid in this context
                                    ERRMSG_EMPTY_STRING_NEVER_VALID The empty string is never valid in this context.

                                    ERRMSG_ARG_OUT_OF_RANGE         Value of {0} is out of range; it must be between {1} and {2}.

                              ERRMSG_INVALID_COMMAND_LINE

                              was: One or more command line arguments are invalid.
                              is:  At least one command line argument is invalid.

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Core\MoreMath.cs (NEW):
-------------------------------------------------------------------------------------------------------

/*
    ============================================================================

    Namespace:          WizardWrx

    Class Name:         MoreMath

    File Name:          MoreMath.cs

    Synopsis:           This sealed class is a container for utility routines to
                        perform seldom-needed and somewhat obscure mathematical
                        operations.

    Remarks:            To disambiguate its name, this class is called MoreMath,
                        because the System namespace in the Base Class Library
                        defines a class called Math.

                        All but one of the initial members of this class are
                        ports of routines that I originally implemented as part
                        of static class PureDate, which belonged to deprecated
                        assembly WizardWrx.DateMath.dll. This port incorporates
                        lessons learned about library design and documentation
                        learned in the ensuing decade.

                        Since this class is pure C#, and uses only fundamental
                        value types, it is devoid of using directives other than
                        the ubiqutous System namespace, which includes the core
                        Exception classes.

    ----------------------------------------------------------------------------
    Revision History
    ----------------------------------------------------------------------------

    Date       Version Author Description
    ---------- ------- ------ --------------------------------------------------
	2018/11/12 7.11    DAG    This class makes its debut, with the following:

                              1) IsEvenlyDivisibleByAnyInteger, defined twice,
                                 to accept integer and long inputs.

                              2) IsGregorianLeapYear implements the Gregorian
                                 leap year algorithm.

                              3) IsValidGregorianYear returns TRUE if given a
                                 number that is a valid year in the Gregorian
                                 calendar.
    ============================================================================
*/

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\Core\StringExtensions.cs:
-------------------------------------------------------------------------------------------------------

    2018/11/11 7.11    DAG 1) Add RenderEvenWhenNull, which represents a null
                              reference as a localizable string literal,
                              MSG_OBJECT_REFERENCE_IS_NULL.

                           2) Add EnumFromString.

	2018/11/17 7.11    DAG ParseCommentInHTMLComment: Wrap the XML comment in
                           concerning cross references to other assemblies.

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\EmbeddedTextFile\ByteOrderMark.cs:
-------------------------------------------------------------------------------------------------------

	2018/11/11 7.11    DAG    Re-cast the text of the embedded help topics in an
                              active voice whereever it made sense to do so.

-------------------------------------------------------------------------------------------------------
F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\Wizardwrx\EmbeddedTextFile\Readers.cs:
-------------------------------------------------------------------------------------------------------

	2018/11/11 7.11    DAG    Re-cast the text of the embedded help topics in an
                              active voice whereever it made sense to do so, and
                              make technical corrections in the help text,
                              including coverage of exceptions that I discovered
                              was missing.
