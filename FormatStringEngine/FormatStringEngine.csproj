<?xml version="1.0" encoding="utf-8"?>
<!--
	============================================================================
	Project Name:		FormatStringEngine.csproj

	Project Abstract:	This library supports proactive parsing of format items
	                    and complete format control strings that are dynamically
	                    generated.

	============================================================================
	Revision History
	============================================================================

	Date       By  Description
	========== === =============================================================
	2019/04/28 DAG Add ProductAssemblyInfo.cs the right way, as a link.
	2019/07/05 DAG Add automatic NuGet package publication.
	============================================================================
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4D82458F-864F-494E-A537-1E89D6C8073C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>WizardWrx.FormatStringEngine</RootNamespace>
    <AssemblyName>WizardWrx.FormatStringEngine</AssemblyName>
    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile />
    <!-- 2019/07/04 13:27:28 - DAG - Added for NuGet package builder -->
    <PackageDir>Package</PackageDir>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\Wizardwrx.FormatStringEngine.XML</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Release\Wizardwrx.FormatStringEngine.XML</DocumentationFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\ProductAssemblyInfo.cs">
      <Link>Properties\ProductAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="FormatItem.cs" />
    <Compile Include="FormatItemsCollection.cs" />
    <Compile Include="FormatStringError.cs" />
    <Compile Include="FormatStringParser.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="System" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- 2019/07/04 10:15:50 - DAG Everything from this point to the end is new, and was added to support NuGet package generation. -->
  <Target Name="AfterBuild">
    <!-- Load up the information from the assembly -->
    <GetAssemblyIdentity AssemblyFiles="$(OutputPath)$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="OutputAssemblyInfo" />
    </GetAssemblyIdentity>
    <Message Text="Info: Assembly $(AssemblyName).dll version = %(OutputAssemblyInfo.Version)" />
  </Target>
  <Target Name="Package" AfterTargets="AfterBuild" Condition=" '$(Configuration)' == 'Release'">
    <!-- Ensure the Package directory exists for this project -->
    <MakeDir Directories="$(PackageDir)" />
    <!-- Package the project -->
    <Exec WorkingDirectory="$(BuildDir)" Command="NuGet.exe pack $(ProjectName).csproj -Properties Configuration=$(Configuration) -OutputDir $(PackageDir) -IncludeReferencedProjects" />
  </Target>
  <!-- Publish the project. -->
  <Target Name="Publish" AfterTargets="Package" Condition=" '$(Configuration)' == 'Release'">
    <Exec WorkingDirectory="$(PackageDir)" Command="NuGet.exe push $(AssemblyName).%(OutputAssemblyInfo.Version).nupkg" />
  </Target>
  <Target Name="BeforeBuild" Condition=" '$(Configuration)' == 'Debug'">
    <Exec WorkingDirectory="$(ProjectDir)" Command="nuget update $(ProjectDir)packages.config" />
    <Exec WorkingDirectory="$(ProjectDir)" Command="nuget restore $(ProjectDir)packages.config" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <PropertyGroup>
    <PreBuildEvent>wwBldNbrMgr.exe "$(ProjectDir) "</PreBuildEvent>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>wwBldNbrMgr.exe -r "-p$(ProjectDir) " "-t$(TargetPath)"</PostBuildEvent>
  </PropertyGroup>
  -->
</Project>